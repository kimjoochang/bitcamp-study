*인터프리터 = 엔진 = player = runtime =VM 
	
	장점 = OS용 인터프리터만 설치되어 있다면 언제든 실행 가능 ->멀티 OS 지원

	단점 = 소스파일의 명령을 한 줄 씩 읽어서 실행
		->기계어를 바로 실행하는 방식보다 실행 속도가 느리다.
		-> 소스코드가 공개된다


*자바 컴파일

	명령문 --- 컴파일 ---> 바이트코드 ---loading---->JVM ----실행---->OS
		
		명령문 ~ 바이트코드 => 컴파일방식 -> 문법검사완료 / 실행에 유리한 단축형태의 명령어인 바이트코드로 변환
								->인터프리터가 실행할 때 소스를 직접 읽는 것보다 실행 속도 빠름

* 애플리케이션과 프로젝트

	프로젝트 => 앱 개발에 있어 최소의 관리수단 => 애플리케이션 개발의 시작은 프로젝트를 생성하는 것으로 시작!



	1. 소스를 관리
	2. 컴파일을 통해 생성된 산출물 관리 (class파일, jar파일, bat,sh과 같은 실행스크립트 파일)


*관리 단계

1단계 => git repo. = project 관리 폴더

2단계 => 소스파일과 바이트코드가 들어있는 .class 파일을 분리  (src / bin 폴더)

3단계 => 애플리케이션의 기능이 복잡해지고 규모가 커짐에 따라 프로그래밍 소스 외에 다른 파일들도 필요하게 되었다 (다른파일들 => 설정파일, 특정 개발도구에서 사용하는 파일, 단위테스트 관련 소스 및 설정 파일)
	
	bitcamp-study/
		-src
		   -main (application 관련 파일)
		        -java (자바소스)
		        -resources (일반파일)
		   -test (단위테스트 관련 파일)
		       -java (자바소스)
		       -resources (일반 파일)		
		-bin
		   -main (.class 파일)		
4단계 => 애플리케이션의 규모가 커지면 단일 프로젝트로 관리하기 힘들다.
	그래서 한 저장소에 여러 프로젝트를 둘 수 있도록 주고를 변경
bitcamp-study/
	-java_basic
		-src
		   -main (application 관련 파일)
		        -java (자바소스)
		        -resources (일반파일)
		   -test (단위테스트 관련 파일)
		       -java (자바소스)
		       -resources (일반 파일)		
		-bin
		   -main (.class 파일)	