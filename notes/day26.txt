## 캡슐화 - 같은패키지

private -> 같은 클래스 내에서만 접근 가능
default -> private + 같은 패키지 내 접근 가능
protected -> default + 서브 클래스로 만든 변수인 경우 서브 클래스에서 접근 가능 
                (서브 클래스의 경우, 인스턴스로 만들었을 경우만 가능!)
                (슈퍼클래스의 인스턴스가 아닌 자식클래스의 인스턴스로만 접근 가능하다!)
public -> 모두 다 가능

# 실무
1. 인스턴스 변수는 보통 private 으로 접근을 제한한다.
2. 겟터, 셋터는 public으로 접근을 모두에게 공개한다.
3. 일반 메서드도 public으로 접근을 모두에게 공개한다.
4. 그 클래스 내부에서만 사용되는 메서드는 private으로 접근을 제한한다.
5. 자식 클래스의 접근을 허용할 필요가 있을 경우에만 protected로 만든다.
6. 다른 개발자가 사용할 클래스 모음을 만들 때
    - 그 모음집 내에서만 사용될 변수나 메서드인 경우 (default)로 접근을 제한한다.
    - 즉 라이브러리를 만드는 개발자인 경우 (default)를 사용하는 경우가 있다.


## 캡슐화
    -> 추상화를 통해 외부에서 쉽게 접근하지 못하도록 숨김 (즉, 데이터를 쉽게 바꾸지 못하도록 할 때 사용!)

        -> 캡슐화 사용 이유
            - 정보은닉 (=> 직접적인 접근을 막고 객체가 제공하는 필드와 메소드를 통해서만 접근 가능)
                1. 유지보수나 확장 시 오류의 범위 최소화
                2. 객채 내 정보 손상과 오용 방지 & 데이터가 변경 되어도 다른 객체 영향 x
        
        -> 캡슐화 사용 방법
            1. getter / setter 
                -> why?
                    - 필드에 유효한 값을 넣기 위해 사용
                        -> 메서드를 통해 값을 설정

            2. 생성자를 private으로 제한
                -> why?
                    - 1. 인스턴스 생성이 복잡 
                        -> 메서드를 통해 인스턴스를 생성 (팩토리 메서드)
                    - 2. 인스턴스를 한 개만 생성
                        -> 메서드를 통해 인스턴스를 생성 ( 싱글톤 패턴)

## composite 패턴
    -> Tree 구조를 갖는 객체를 다룰 때 유용한 설계 기법 (ex) 조직도, 메뉴, 파일시스템)