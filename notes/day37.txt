프로젝트 방법론

    방법론 -> 이론이나 경험적 사실을 정리하여 표준화 한 것!
                -> 표준화란? 사람이나 조직에 상관없이, 경험의 많고 적음에 상관없이 일관된 수준의 결과물을 산출


    소프트웨어 개발 방법론
        -> 소프트웨어를 생산 -> 프로그래밍 개발 과정을 정리 -> 개발과정을 표준화

        종류 - 1. 폭포수 모델
               2. 프로토타이핑
               3. 반복적, 점진적 개발
               4. 애자일 방법론


    요구사항 식별 방법론

    액터 식별
        액터 -> 시스템을 사용하는 사람 또는 프로세스, 장치

        액터 - 주 액터 (primary actor) : 시스템을 사용하는 액터
               보조 액터(secondary actor) : 시스템이 사용하는 다른 시스템

    use-case 식별
        -> 액터가 시스템을 통해 달성하려는 업무 목표

        * 유스케이스 명은 업무 명으로 이름을 짓는다.
            한글 예) 구매하기, 주문하기 ...
            영어 예) Order, Add Board ... 


        use-case 식별 가이드

             1. 한 사람이 한 순간에 수행하는 업무인가?
                ex) 책 구매하기 => 너무 크다 -> 주문 , 결제, 배송 으로 나눌 수 있다

             2. use-case의 시작과 끝이 명확한가? 카운트를 할 수 있는가?
                ex) 게시글 관리 => 게시글 관리의 시작과 끝을 명시할 수 없다 -> 카운트 불가! -> 더 작은 규모로 use-case를 쪼개야 한다!
             3. 시스템을 통해 처리하는 업무인가?
                ex) 팩스보내기 => 오프라인 업무는 use-case가 아니다.
                    로그인 => 시스템을 이용해서 처리하는 작업은 맞지만 업무는 아니다.

    use-case 병합
        -> 여러 use-case를 한 개의  use-case로 합치기
            -> 합치는게 더 쉬울 경우!

            ex) 1. CRUD use-case 경우
                게시글 등록, 조회 , 변경 ,삭제 => 게시글 관리로 병합

                2. 서로 밀접하게 관련된 업무인 경우
                책 주문, 책 결제 => 책 구매

    use-case 분리
        -> 여러  use-case에서 공통으로 수행하는 작업인 경우

            ex) 주문하기, 장바구니 담기, 배송조회  use-case에서 공통으로 로그인 기능을 수행할 경우, 로그인 기능을 분리하면 개발관리가 쉬워진다!!
                
                * 주의) 분리를 통해 식별한 use-case는 업무가 아닌 경우가 있다!