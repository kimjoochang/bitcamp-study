##컴파일
※ font-size = 글자의 높이

OS 환경변수 PATH에 등록할 경우 gcc 컴파일러를 실행할 경로를 적을 필요가 없다.

프로그래밍 (프로그램 만들고 실행하기 1)

1. 컴파일 방식

    명령문 ———> 기계어 ———————→OS ←————-—→CPU

            번역                         loading                      전달                  명령어 처리

    명령문 ~ 기계어 ⇒ compile                   기계어 ~ CPU ⇒실행

    번역해주는 소프트웨어 ⇒ compiler  ex) gcc(window용 mingw64)

    기계어(0과1로 구성) = CPU가 인식할 수 있는 명령어 ⇒ cpu instruction set

    - cpu에 명령 → 5볼트를 통해
    - 핀 개수에 따라 ... 16비트 32비트 64비트
    - cpu 제조 회사에 따라 cpu 규칙이 다름

        (예를 들어 더하기를 입력 하더라도 제조사마다 전기 신호가 다름)

    C언어 예시

    - 소스파일——————-컴파일—————>기계어 (.exe)

        #include <studio.h>

        int main() {

        printf("Hello World!!")

        return 0;

        }

        명령 프롬프트에서 $gcc 소스파일명 입력 ⇒ 컴파일 ($gcc -o 실행파일명 소스파일 명 ⇒ 파일이름 지정)

        기계어와 OS

        소스파일 ———-컴파일—————>.exe파일——loading——> OS ——→ CPU

        OS(윈도우, 리눅스, 맥)마다 기계어를 배치하는 방법이 다르다. (즉, 양식이 다르다)

        → 컴파일러가 기계어를 배치하므로 운영체제에 맞는 컴파일러 이용하여 다시 번역

        (CPU에 따라 기계어가 다르므로 CPU에 맞는 컴파일러도 고려)

        load ⇒ 하드디스크에서 램으로 읽어오는 것

    2. 인터프리터 방식 ⇒ 소스파일의 명령을 도우미 프로그램(=interpreter)을 통해 바로 실행

    ex) JavaScript, PHP, Python 등

    hello.js———loading———>node.js———-실행———>OS

    node.js ⇒ 자바스크립트 인터프리터(=엔진) → $node 소스파일 명


* 정리
 프로그램 만들고 실행하기
	-컴파일
		명령문 ---번역(컴파일)---> 기계어 ----loading---->OS ---전달---> CPU
		OS가 다르거나 CPU가 다를경우, 컴파일을 하더라도 실행이 안되기 때문에 해당 OS와 CPU에 맞춘 컴파일러를 이용해야함
		ex) 같은 CPU여도 OS가 다를 경우 기계어가 다르기 때문에 실행x -> OS에 맞는 컴파일러 이용해서 다시 번역
		     같은 OS여도 CPU가 다를 경우 기계어 배치방법이 다르기 때문에 실행x -> CPU에 맞는 컴파일러 이용해서 다시 번역
			
			* 번역 = compile (By compiler ex) gcc ..) ->ex) $gcc 소스파일명 / $gcc 실행파일명 소스파일명

 
	-인터프리터 방식 ex)JavaScript, PHP, Python ...			
		
		명령문 ---loading ---> 인터프리터 ----실행----> OS

			* 인터프리터 = => 소스파일의 명령을 도우미 프로그램을 통해 바로 실행 ->ex) $node 소스파일명