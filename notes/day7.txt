* 리터럴

	 [ HDD(hello.exe) ] ----loading ----> [ RAM ] ------> [ L1,L2,L3 ] ------> [ CPU ]
    		   	   
	- 부동소수점 (e 대/소문자 다 가능)
		-Exponential
			ex) 0.0314 = 3.14e-2
			     314 = 3.14e2

		-4바이트 / 8바이트
			- 4바이트 (32비트) -> - 숫자 맨 뒤에 f 또는 F 붙임 (주로 f 이용)
						ex) 3.14f
					    - 부동소수점 유효자리 수 = 약 7자리 수
     
			- 8바이트 (64비트) -> 숫자 맨 뒤에 d 또는 D 붙이거나 생략 가능
						ex) 3.14d
					    - 부동소수점 유효자리 수 = 약 16자리 수

					* 유효자리수는 소수점이 정확하게 2진수로 변환이 안될 경우 근사값으로 대체됨!!	

			ex) 12.375 (10진수)
				-> 2진법으로 바꾸면 12 -> 1100 / 0.375 -> 011 => 1100.011
				-> 정규화(소수점을 왼쪽 한자리만 남기는 곳으로 이동 후 지수부와 가수부로 나눔)를 하면 1100.011 --> 1.100011 * 2^3
				-> 지수부 => 2^3  -> Excess-k를 통해 2진수로 변환
				-> 가수부 => 0.10011 -> sign - Magnitude를 통해 2진수로 변환

			**메모리에 저장될 때 (4바이트 / 8바이트)
			-> 4바이트 => 음수/양수 1bit , 지수 8bit , 가수 23bit
			-> 8바이트 => 음수/양수 1bit,  지수 11bit, 가수 52bit
		
				12.375를 2진법 변환 후 4바이트 메모리에 넣으면
					->1 1000_0010 1000_1100_0000_0000_0000_000

					-> 1 => 양수를 뜻함
					->1000 0010 => 지수부를 Excess-k를 통해 변환 (2^3의 3을 127과 더한 후 2진수로 변환)
					->1000_1100_0000_0000_0000_000 => 가수부를 2진수로 변환( 나머지 메모리는 0으로 채움)	

	
		

	- 논리
		- true
		- false 

	- 문자( ' ' )
		'A' , '가', ..
		'\n' (이스케이프 문자)	

		문자 -> 2진수 => charset 으로 칭함

		- 종류
		
			1) ASCII (7비트)
				- 영어 대문자, 소문자 , 특수문자 , 숫자

			2) ISO-8859-1 (8비트)
				- ASCII + 유럽문자

			3) EUC-KR (16비트)
				- 한글 o (안써지는 한글도 있음)

			4) unicode (16비트) ( = UCS / UCS-2 )
				- 자바가 저장 시 사용
				- 영어, 한글 모두 2byte (이전에는 영어 1byte) -> 비효율
				- 한글은 EUC-KR과 호환 x
			
			5) UTF-8 ( 1~4 byte)
				- 1~4 byte로 변환 ( ISO-8859-1 => 1byte , 한글 => 3byte) 
	

	- 문자열( " " )
		"가나다" , "ABCD" ...
		"\n" (이스케이프 문자)

* 콘솔출력
	System.out.print(값이나 표현식); => 값 출력
	System.out.println(값이나 표현식); => 값 출력 후 줄바꿈
	System.out.printf("출력형식",값,값,...); =>출력형식을 정한 후 넣을 값을 나열 => ex) System.out.printf("팀원 : "%s%n", "홍길동, 가나다, 라마바, 사아자")
	
-변수 -> 값을 담을 메모리

- 배열 -> 여러 개의 값을 담을 메모리 / 변수 목록